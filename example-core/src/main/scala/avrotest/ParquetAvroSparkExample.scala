/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//https://github.com/AndreSchumacher/avro-parquet-spark-example
package avrotest


import org.apache.avro.Schema
import org.apache.avro.generic.IndexedRecord
import org.apache.hadoop.conf.Configuration

import org.apache.hadoop.fs.Path

import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.spark.sql.{DataFrame, SQLContext}
import parquet.avro.AvroParquetWriter



// our own classes generated from user.avdl by Avro tools

import java.io.File

import org.bdgenomics.formats.avro.{Variant, Genotype}

object ParquetAvroSparkExample {

  private var sqc: SQLContext = _

  def main(args: Array[String]) {
    //This is the number of Genotype class that will be generated by the createParquetFile function.
    val NUMBER_OF_GENOTYPE = 200;

    //This is the path where Parquet files will be created
    val DATA_PATH = "data/"

    //This is the file name of the file that will contains the Genotypes objects
    var fileName = "genotypes.parquet"

    //Initialize Spark
    val conf = new SparkConf(true).setMaster("local[10]").setAppName("ParquetAvroExample")

    //Create a Spark Context and wrap it inside a SQLContext
    sqc = new SQLContext(new SparkContext(conf))

    //This call generates some Genotype classes and saves it in a Parquet file.  You can comment this line if you don't
    //want to re-generate the Parquet file everytime you test this program.
    createParquetFile(NUMBER_OF_GENOTYPE, Genotype.getClassSchema, new Path(DATA_PATH, fileName), sqc.sparkContext.hadoopConfiguration)

    //Here we load the parquet file into a DataFrame object.  This will allow us to query the data
    //Consult the following documentation if you want to know what your query options are: https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.DataFrame
    val dataFrame:DataFrame = sqc.read.parquet(DATA_PATH + fileName)


    println("")
    println("******************************************************************");
    println("******************************************************************");

    //Prints the schema of the Parquet file
    //df3.printSchema()

    //Select some data and output it to the console
    dataFrame.select("variant.start", "variant.end").filter("start >= 20").filter("start <= 30").show()

    println("******************************************************************");
    println("******************************************************************");
    println("")

    //Close Spark to free up the memory
    sqc.sparkContext.stop()
  }

  /**
   * This function delete the file on the disk if it exist.
   */
  def deleteIfExist(path:String, fileName:String)
  {
    val fileTemp = new File(path, fileName);
    if (fileTemp.exists())
    {
      fileTemp.delete();
    }
  }

  /**
   * This function first make sure that the parquet file its about to create does not exist on the hard disk.
   * Then, it creates an AvroParquetWriter object that will be able to understand the Avro objects and writes them into a Parquet file
   * Then, it loops for the number of Genotype we want to create (see constant in the main function), create a Genotype object and write it in the Parquet File
   * The last line of this function close the Parquet file writer which commit and save the file on the disk.
   */
  def createParquetFile(numberOfGenotype: Int, schema: Schema, output: Path, conf: Configuration): Unit = {
    //Prepare the parquet file(s)...
    //We must make sure that the parquet file(s) are deleted because the following script doesn't replace the file.
    deleteIfExist(output.getParent().toString(), "genotypes.parquet");
    deleteIfExist(output.getParent().toString(), ".DS_Store");//mac computers create temporary files... and make the following code crash for nothing (spaks seems to take the first file it find)...

    val parquetWriter = new AvroParquetWriter[IndexedRecord](output, schema)

    for (i <- 0 until numberOfGenotype by 1)
    {
      parquetWriter.write(createGenotype(i))
    }

    parquetWriter.close()
  }

  /**
   * This function generates a Genotype object for testing purpose
   */
  def createGenotype(idx: Int): Genotype = {
    return Genotype.newBuilder()
      .setSampleId(idx.toString())
      .setSampleDescription("mySampleDescription" + idx.toString())
      .setVariant(Variant.newBuilder()
                  .setStart(idx.toLong)
                  .setEnd(idx.toLong + 10)
                  .setReferenceAllele("myReferenceAllele" + idx.toString())
                  .build())
      .build()
  }
}
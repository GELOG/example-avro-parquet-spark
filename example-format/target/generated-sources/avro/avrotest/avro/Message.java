/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package avrotest.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"avrotest.avro\",\"fields\":[{\"name\":\"ID\",\"type\":\"long\",\"default\":0},{\"name\":\"sender\",\"type\":\"int\",\"default\":\"unknown\"},{\"name\":\"recipient\",\"type\":\"int\",\"default\":\"unknown\"},{\"name\":\"content\",\"type\":\"string\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long ID;
  @Deprecated public int sender;
  @Deprecated public int recipient;
  @Deprecated public java.lang.CharSequence content;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Message() {}

  /**
   * All-args constructor.
   */
  public Message(java.lang.Long ID, java.lang.Integer sender, java.lang.Integer recipient, java.lang.CharSequence content) {
    this.ID = ID;
    this.sender = sender;
    this.recipient = recipient;
    this.content = content;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return sender;
    case 2: return recipient;
    case 3: return content;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.Long)value$; break;
    case 1: sender = (java.lang.Integer)value$; break;
    case 2: recipient = (java.lang.Integer)value$; break;
    case 3: content = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ID' field.
   */
  public java.lang.Long getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.Long value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'sender' field.
   */
  public java.lang.Integer getSender() {
    return sender;
  }

  /**
   * Sets the value of the 'sender' field.
   * @param value the value to set.
   */
  public void setSender(java.lang.Integer value) {
    this.sender = value;
  }

  /**
   * Gets the value of the 'recipient' field.
   */
  public java.lang.Integer getRecipient() {
    return recipient;
  }

  /**
   * Sets the value of the 'recipient' field.
   * @param value the value to set.
   */
  public void setRecipient(java.lang.Integer value) {
    this.recipient = value;
  }

  /**
   * Gets the value of the 'content' field.
   */
  public java.lang.CharSequence getContent() {
    return content;
  }

  /**
   * Sets the value of the 'content' field.
   * @param value the value to set.
   */
  public void setContent(java.lang.CharSequence value) {
    this.content = value;
  }

  /** Creates a new Message RecordBuilder */
  public static avrotest.avro.Message.Builder newBuilder() {
    return new avrotest.avro.Message.Builder();
  }
  
  /** Creates a new Message RecordBuilder by copying an existing Builder */
  public static avrotest.avro.Message.Builder newBuilder(avrotest.avro.Message.Builder other) {
    return new avrotest.avro.Message.Builder(other);
  }
  
  /** Creates a new Message RecordBuilder by copying an existing Message instance */
  public static avrotest.avro.Message.Builder newBuilder(avrotest.avro.Message other) {
    return new avrotest.avro.Message.Builder(other);
  }
  
  /**
   * RecordBuilder for Message instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private long ID;
    private int sender;
    private int recipient;
    private java.lang.CharSequence content;

    /** Creates a new Builder */
    private Builder() {
      super(avrotest.avro.Message.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(avrotest.avro.Message.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sender)) {
        this.sender = data().deepCopy(fields()[1].schema(), other.sender);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recipient)) {
        this.recipient = data().deepCopy(fields()[2].schema(), other.recipient);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.content)) {
        this.content = data().deepCopy(fields()[3].schema(), other.content);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Message instance */
    private Builder(avrotest.avro.Message other) {
            super(avrotest.avro.Message.SCHEMA$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sender)) {
        this.sender = data().deepCopy(fields()[1].schema(), other.sender);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.recipient)) {
        this.recipient = data().deepCopy(fields()[2].schema(), other.recipient);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.content)) {
        this.content = data().deepCopy(fields()[3].schema(), other.content);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'ID' field */
    public java.lang.Long getID() {
      return ID;
    }
    
    /** Sets the value of the 'ID' field */
    public avrotest.avro.Message.Builder setID(long value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'ID' field has been set */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'ID' field */
    public avrotest.avro.Message.Builder clearID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sender' field */
    public java.lang.Integer getSender() {
      return sender;
    }
    
    /** Sets the value of the 'sender' field */
    public avrotest.avro.Message.Builder setSender(int value) {
      validate(fields()[1], value);
      this.sender = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sender' field has been set */
    public boolean hasSender() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sender' field */
    public avrotest.avro.Message.Builder clearSender() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'recipient' field */
    public java.lang.Integer getRecipient() {
      return recipient;
    }
    
    /** Sets the value of the 'recipient' field */
    public avrotest.avro.Message.Builder setRecipient(int value) {
      validate(fields()[2], value);
      this.recipient = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'recipient' field has been set */
    public boolean hasRecipient() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'recipient' field */
    public avrotest.avro.Message.Builder clearRecipient() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'content' field */
    public java.lang.CharSequence getContent() {
      return content;
    }
    
    /** Sets the value of the 'content' field */
    public avrotest.avro.Message.Builder setContent(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.content = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'content' field has been set */
    public boolean hasContent() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'content' field */
    public avrotest.avro.Message.Builder clearContent() {
      content = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Message build() {
      try {
        Message record = new Message();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.Long) defaultValue(fields()[0]);
        record.sender = fieldSetFlags()[1] ? this.sender : (java.lang.Integer) defaultValue(fields()[1]);
        record.recipient = fieldSetFlags()[2] ? this.recipient : (java.lang.Integer) defaultValue(fields()[2]);
        record.content = fieldSetFlags()[3] ? this.content : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
